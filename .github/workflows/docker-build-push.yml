name: Docker Build and Push

on:
  schedule:
    # Run at 00:00 UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      specific_dockerfile:
        description: 'Specific Dockerfile directory to build (leave empty for auto-detection)'
        required: false
        default: ''

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for detecting changes

      - name: Detect Dockerfile changes
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.specific_dockerfile }}" ]; then
            # If a specific Dockerfile directory is provided, use it
            DIRS_JSON=$(echo "[\"${{ github.event.inputs.specific_dockerfile }}\"]" | jq -c .)
          else
            # Get list of directories containing Dockerfiles that have changed
            if [ "${{ github.event_name }}" == "schedule" ]; then
              # For scheduled runs, check changes in the last 24 hours
              # Use a more reliable approach to get changes
              git fetch --depth=2 origin
              LAST_COMMIT=$(git rev-parse HEAD)
              PREVIOUS_COMMIT=$(git rev-parse HEAD~1 || echo "")

              echo "Last commit: $LAST_COMMIT"
              echo "Previous commit: $PREVIOUS_COMMIT"

              if [ -n "$PREVIOUS_COMMIT" ]; then
                CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT $LAST_COMMIT)
              else
                # If there's no previous commit, consider all Dockerfiles
                CHANGED_FILES=$(find . -name "Dockerfile" | sed 's|/Dockerfile$||' | sed 's|^./||')
              fi

              echo "Changed files: $CHANGED_FILES"
            else
              # For manual runs without specific directory, check all Dockerfiles
              CHANGED_FILES=$(find . -name "Dockerfile" | sed 's|/Dockerfile$||' | sed 's|^./||')
              echo "Found Dockerfiles: $CHANGED_FILES"
            fi

            # Extract directories with changed Dockerfiles
            DIRS=()
            for FILE in $CHANGED_FILES; do
              # For manual runs, the find command returns the directory name directly
              if [[ "${{ github.event_name }}" != "schedule" && "$FILE" != *"/"* ]]; then
                # This is a directory name from find command
                echo "Adding directory directly: $FILE"
                DIRS+=("$FILE")
                continue
              fi

              # For scheduled runs or if the file path contains a slash
              DIR=$(dirname "$FILE")
              if [[ "$FILE" == *Dockerfile || -f "$DIR/Dockerfile" ]]; then
                # If the file is a Dockerfile or in a directory with a Dockerfile
                if [[ "$DIR" == "." ]]; then
                  # Handle root Dockerfile
                  DIRS+=(".")
                else
                  # Handle Dockerfile in subdirectory
                  NORMALIZED_DIR=$(echo "$DIR" | sed 's|^\./||')
                  DIRS+=("$NORMALIZED_DIR")
                fi
              fi
            done

            # Print the DIRS array for debugging
            echo "Directories before conversion: ${DIRS[*]}"

            # Remove duplicates and convert to JSON array
            DIRS_JSON=$(printf '%s\n' "${DIRS[@]}" | sort -u | jq -R . | jq -s -c .)
          fi

          echo "Directories with changed Dockerfiles: $DIRS_JSON"
          echo "matrix=$DIRS_JSON" >> $GITHUB_OUTPUT

  build-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' && needs.detect-changes.outputs.matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile_dir: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image name from directory
        id: extract-name
        run: |
          DIR="${{ matrix.dockerfile_dir }}"
          # Use directory name as image name, or 'base' for root directory
          if [ "$DIR" == "." ]; then
            IMAGE_NAME="base"
          else
            IMAGE_NAME=$(basename "$DIR")
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Extract version from Dockerfile
        id: extract-version
        run: |
          DOCKERFILE="${{ matrix.dockerfile_dir }}/Dockerfile"
          if [ -f "$DOCKERFILE" ]; then
            # Extract version from OCI style label in Dockerfile
            VERSION=$(grep -E "org.opencontainers.image.version=" "$DOCKERFILE" | sed 's/.*org.opencontainers.image.version="\([^"]*\)".*/\1/')
            if [ -n "$VERSION" ]; then
              echo "Found version: $VERSION"
              echo "VERSION=$VERSION" >> $GITHUB_ENV
            else
              echo "No version label found in Dockerfile, using date as fallback"
              VERSION=$(date +'%Y%m%d')
              echo "VERSION=$VERSION" >> $GITHUB_ENV
            fi
          else
            echo "Dockerfile not found, using date as fallback"
            VERSION=$(date +'%Y%m%d')
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        run: |
          # Check if dockerfile_dir is not empty
          if [ -n "${{ matrix.dockerfile_dir }}" ]; then
            # Use the existing build-push.sh script
            chmod +x ./build-push.sh
            ./build-push.sh -d "${{ matrix.dockerfile_dir }}" -t "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest,${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          else
            echo "No Dockerfile directory specified, skipping build and push"
          fi
